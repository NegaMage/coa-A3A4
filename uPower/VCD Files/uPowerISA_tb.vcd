$date
	Sun Jun 14 17:00:31 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu64bittb $end
$var wire 1 ! branch $end
$var wire 64 " ALU_result [63:0] $end
$var reg 1 # aa $end
$var reg 5 $ bi [4:0] $end
$var reg 5 % bo [4:0] $end
$var reg 14 & ds [13:0] $end
$var reg 6 ' opcode [5:0] $end
$var reg 5 ( rs [4:0] $end
$var reg 5 ) rt [4:0] $end
$var reg 16 * si [15:0] $end
$var reg 2 + xods [1:0] $end
$var reg 10 , xox [9:0] $end
$var reg 9 - xoxo [8:0] $end
$scope module testerboi $end
$var wire 1 # aa $end
$var wire 5 . bi [4:0] $end
$var wire 5 / bo [4:0] $end
$var wire 14 0 ds [13:0] $end
$var wire 6 1 opcode [5:0] $end
$var wire 5 2 rs [4:0] $end
$var wire 5 3 rt [4:0] $end
$var wire 16 4 si [15:0] $end
$var wire 2 5 xods [1:0] $end
$var wire 10 6 xox [9:0] $end
$var wire 9 7 xoxo [8:0] $end
$var reg 64 8 ALU_result [63:0] $end
$var reg 1 ! Branch $end
$var reg 64 9 signExtendSI [63:0] $end
$var reg 64 : signed_rs [63:0] $end
$var reg 64 ; signed_rt [63:0] $end
$var reg 64 < zeroExtendDS [63:0] $end
$var reg 64 = zeroExtendSI [63:0] $end
$upscope $end
$upscope $end
$scope module control_unit_tb $end
$var wire 1 > RegWrite $end
$var wire 1 ? RegRead $end
$var wire 1 @ MemWrite $end
$var wire 1 A MemRead $end
$var wire 1 B Branch $end
$var reg 6 C opcode [5:0] $end
$var reg 2 D xods [1:0] $end
$var reg 10 E xox [9:0] $end
$var reg 9 F xoxo [8:0] $end
$scope module controller $end
$var wire 6 G opcode [5:0] $end
$var wire 2 H xods [1:0] $end
$var wire 10 I xox [9:0] $end
$var wire 9 J xoxo [8:0] $end
$var reg 1 B Branch $end
$var reg 1 A MemRead $end
$var reg 1 @ MemWrite $end
$var reg 1 ? RegRead $end
$var reg 1 > RegWrite $end
$upscope $end
$upscope $end
$scope module ins_parsetb $end
$var wire 9 K xoxo [8:0] $end
$var wire 10 L xox [9:0] $end
$var wire 2 M xods [1:0] $end
$var wire 16 N si [15:0] $end
$var wire 5 O rt [4:0] $end
$var wire 5 P rs [4:0] $end
$var wire 5 Q rd [4:0] $end
$var wire 1 R rc $end
$var wire 6 S opcode [5:0] $end
$var wire 1 T oe $end
$var wire 1 U lk $end
$var wire 24 V li [23:0] $end
$var wire 14 W ds [13:0] $end
$var wire 5 X bo [4:0] $end
$var wire 5 Y bi [4:0] $end
$var wire 14 Z bd [13:0] $end
$var wire 1 [ aa $end
$var reg 32 \ instruction [31:0] $end
$var reg 32 ] p_count [31:0] $end
$scope module instructionParser $end
$var wire 32 ^ instruction [31:0] $end
$var wire 32 _ p_count [31:0] $end
$var wire 6 ` opcode [5:0] $end
$var reg 1 [ aa $end
$var reg 14 a bd [13:0] $end
$var reg 5 b bi [4:0] $end
$var reg 5 c bo [4:0] $end
$var reg 14 d ds [13:0] $end
$var reg 24 e li [23:0] $end
$var reg 1 U lk $end
$var reg 1 T oe $end
$var reg 1 R rc $end
$var reg 5 f rd [4:0] $end
$var reg 5 g rs [4:0] $end
$var reg 5 h rt [4:0] $end
$var reg 16 i si [15:0] $end
$var reg 2 j xods [1:0] $end
$var reg 10 k xox [9:0] $end
$var reg 9 l xoxo [8:0] $end
$upscope $end
$upscope $end
$scope module read_data_memory_tb $end
$var wire 64 m read_data [63:0] $end
$var reg 1 n MemRead $end
$var reg 1 o MemWrite $end
$var reg 64 p address [63:0] $end
$var reg 6 q opcode [5:0] $end
$var reg 64 r write_data [63:0] $end
$scope module testerboi $end
$var wire 1 n MemRead $end
$var wire 1 o MemWrite $end
$var wire 64 s address [63:0] $end
$var wire 6 t opcode [5:0] $end
$var wire 64 u write_data [63:0] $end
$var reg 64 v read_data [63:0] $end
$upscope $end
$upscope $end
$scope module read_instructions_tb $end
$var wire 32 w instruction [31:0] $end
$var reg 32 x program_counter [31:0] $end
$scope module instructionReader $end
$var wire 32 y program_counter [31:0] $end
$var reg 32 z instruction [31:0] $end
$upscope $end
$upscope $end
$scope module read_registers_tb $end
$var wire 64 { read_data_2 [63:0] $end
$var wire 64 | read_data_1 [63:0] $end
$var reg 1 } RegDst $end
$var reg 1 ~ RegRead $end
$var reg 1 !" RegWrite $end
$var reg 1 "" clk $end
$var reg 6 #" opcode [5:0] $end
$var reg 5 $" rd [4:0] $end
$var reg 5 %" rs [4:0] $end
$var reg 5 &" rt [4:0] $end
$var reg 64 '" write_data [63:0] $end
$scope module testerboi $end
$var wire 1 } RegDst $end
$var wire 1 ~ RegRead $end
$var wire 1 !" RegWrite $end
$var wire 1 "" clk $end
$var wire 6 (" opcode [5:0] $end
$var wire 5 )" rd [4:0] $end
$var wire 5 *" rs [4:0] $end
$var wire 5 +" rt [4:0] $end
$var wire 64 ," write_data [63:0] $end
$var reg 64 -" read_data_1 [63:0] $end
$var reg 64 ." read_data_2 [63:0] $end
$upscope $end
$upscope $end
$scope module uPower_testbench $end
$var reg 1 /" clock $end
$scope module test $end
$var wire 1 0" Branch $end
$var wire 1 1" RegDst $end
$var wire 1 /" clock $end
$var wire 9 2" xoxo [8:0] $end
$var wire 10 3" xox [9:0] $end
$var wire 2 4" xods [1:0] $end
$var wire 64 5" write_data [63:0] $end
$var wire 16 6" si [15:0] $end
$var wire 64 7" rt_content [63:0] $end
$var wire 5 8" rt [4:0] $end
$var wire 64 9" rs_content [63:0] $end
$var wire 5 :" rs [4:0] $end
$var wire 5 ;" rd [4:0] $end
$var wire 1 <" rc $end
$var wire 6 =" opcode [5:0] $end
$var wire 1 >" oe $end
$var wire 64 ?" memory_read_data [63:0] $end
$var wire 1 @" lk $end
$var wire 24 A" li [23:0] $end
$var wire 32 B" instruction [31:0] $end
$var wire 14 C" ds [13:0] $end
$var wire 5 D" bo [4:0] $end
$var wire 5 E" bi [4:0] $end
$var wire 14 F" bd [13:0] $end
$var wire 1 G" aa $end
$var wire 1 H" RegWrite $end
$var wire 1 I" RegRead $end
$var wire 1 J" MemWrite $end
$var wire 1 K" MemRead $end
$var reg 32 L" PC [31:0] $end
$scope module ALU $end
$var wire 9 M" xoxo [8:0] $end
$var wire 10 N" xox [9:0] $end
$var wire 2 O" xods [1:0] $end
$var wire 16 P" si [15:0] $end
$var wire 5 Q" rt [4:0] $end
$var wire 5 R" rs [4:0] $end
$var wire 6 S" opcode [5:0] $end
$var wire 14 T" ds [13:0] $end
$var wire 5 U" bo [4:0] $end
$var wire 5 V" bi [4:0] $end
$var wire 1 G" aa $end
$var reg 64 W" ALU_result [63:0] $end
$var reg 1 X" Branch $end
$var reg 64 Y" signExtendSI [63:0] $end
$var reg 64 Z" signed_rs [63:0] $end
$var reg 64 [" signed_rt [63:0] $end
$var reg 64 \" zeroExtendDS [63:0] $end
$var reg 64 ]" zeroExtendSI [63:0] $end
$upscope $end
$scope module InstructionMemory $end
$var wire 32 ^" program_counter [31:0] $end
$var reg 32 _" instruction [31:0] $end
$upscope $end
$scope module MainMemory $end
$var wire 64 `" address [63:0] $end
$var wire 64 a" write_data [63:0] $end
$var wire 6 b" opcode [5:0] $end
$var wire 1 J" MemWrite $end
$var wire 1 K" MemRead $end
$var reg 64 c" read_data [63:0] $end
$upscope $end
$scope module Parse $end
$var wire 32 d" instruction [31:0] $end
$var wire 32 e" p_count [31:0] $end
$var wire 6 f" opcode [5:0] $end
$var reg 1 G" aa $end
$var reg 14 g" bd [13:0] $end
$var reg 5 h" bi [4:0] $end
$var reg 5 i" bo [4:0] $end
$var reg 14 j" ds [13:0] $end
$var reg 24 k" li [23:0] $end
$var reg 1 @" lk $end
$var reg 1 >" oe $end
$var reg 1 <" rc $end
$var reg 5 l" rd [4:0] $end
$var reg 5 m" rs [4:0] $end
$var reg 5 n" rt [4:0] $end
$var reg 16 o" si [15:0] $end
$var reg 2 p" xods [1:0] $end
$var reg 10 q" xox [9:0] $end
$var reg 9 r" xoxo [8:0] $end
$upscope $end
$scope module Registers $end
$var wire 1 1" RegDst $end
$var wire 1 /" clk $end
$var wire 6 s" opcode [5:0] $end
$var wire 5 t" rd [4:0] $end
$var wire 5 u" rs [4:0] $end
$var wire 5 v" rt [4:0] $end
$var wire 64 w" write_data [63:0] $end
$var wire 1 H" RegWrite $end
$var wire 1 I" RegRead $end
$var reg 64 x" read_data_1 [63:0] $end
$var reg 64 y" read_data_2 [63:0] $end
$upscope $end
$scope module Signals $end
$var wire 6 z" opcode [5:0] $end
$var wire 2 {" xods [1:0] $end
$var wire 10 |" xox [9:0] $end
$var wire 9 }" xoxo [8:0] $end
$var reg 1 ~" Branch $end
$var reg 1 K" MemRead $end
$var reg 1 J" MemWrite $end
$var reg 1 I" RegRead $end
$var reg 1 H" RegWrite $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1~"
bx }"
bx |"
bx {"
b10010 z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
b10010 s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
b10100100101001001010010 k"
bx j"
bx i"
bx h"
bx g"
b10010 f"
b0 e"
b1001001010010010100100101001001 d"
bx c"
b10010 b"
bx a"
bx `"
b1001001010010010100100101001001 _"
b0 ^"
b0xxxxxxxxxxxxxxxx ]"
b0xxxxxxxxxxxxxx \"
b0xxxxx ["
b0xxxxx Z"
bx Y"
1X"
bx W"
bx V"
bx U"
bx T"
b10010 S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
b0 L"
0K"
0J"
0I"
0H"
0G"
bx F"
bx E"
bx D"
bx C"
b1001001010010010100100101001001 B"
b10100100101001001010010 A"
1@"
bx ?"
x>"
b10010 ="
x<"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
z1"
10"
0/"
b10101000100010110111001010101110 ."
b0 -"
b10101001011000000101011 ,"
b1011 +"
b0 *"
b1110 )"
bx ("
b10101001011000000101011 '"
b1011 &"
b0 %"
b1110 $"
bx #"
x""
0!"
1~
0}
b0 |
b10101000100010110111001010101110 {
b1001001010010010100100101001001 z
b0 y
b0 x
b1001001010010010100100101001001 w
bx v
b1101111111101001 u
b100110 t
b0 s
b1101111111101001 r
b100110 q
b0 p
1o
0n
bx m
b100001010 l
bx k
bx j
bx i
b10 h
b11 g
b1 f
bx e
bx d
bx c
bx b
bx a
b11111 `
bx _
b1111100001000100001101000010100 ^
bx ]
b1111100001000100001101000010100 \
x[
bx Z
bx Y
bx X
bx W
bx V
xU
0T
b11111 S
0R
b1 Q
b11 P
b10 O
bx N
bx M
bx L
b100001010 K
b100001010 J
bx I
bx H
b11111 G
b100001010 F
bx E
bx D
b11111 C
0B
0A
0@
1?
1>
b11111010 =
b0xxxxxxxxxxxxxx <
b101 ;
b11 :
b11111010 9
b1000 8
b100001010 7
bx 6
bx 5
b11111010 4
b101 3
b11 2
b11111 1
bx 0
bx /
bx .
b100001010 -
bx ,
bx +
b11111010 *
b101 )
b11 (
b11111 '
bx &
bx %
bx $
x#
b1000 "
0!
$end
#10
b10101010001010010010100101010101 w
b10101010001010010010100101010101 z
b11100 L
b11100 k
b101 P
b101 g
b11 O
b11 h
b100 Q
b100 f
1A
1>
1?
b10001 "
b10001 8
b11111 ;
b1110 :
b100010 #"
b100010 ("
1}
0~
1!"
b1 x
b1 y
b0 r
b0 u
b1101 p
b1101 s
b101100 q
b101100 t
b1111100100000110010100000111000 \
b1111100100000110010100000111000 ^
b0 D
b0 H
b111010 C
b111010 G
b1110 (
b1110 2
b11111 )
b11111 3
b101000 -
b101000 7
#20
b1001010010100100110011110110110 w
b1001010010100100110011110110110 z
b1000 N
b1000 i
b10 O
b10 h
b110 Q
b110 f
b11010 S
b11010 `
1B
0>
0?
0A
b1100 "
b1100 8
b1100 ;
b1101 :
b101000 #"
b101000 ("
0}
b0 &"
b0 +"
b10 x
b10 y
b1111111111 r
b1111111111 u
b1 p
b1 s
b100100 q
b100100 t
b1101000110000100000000000001000 \
b1101000110000100000000000001000 ^
b10010 C
b10010 G
b1101 (
b1101 2
b1100 )
b1100 3
b11100 ,
b11100 6
b0 -
b0 7
#30
b101011 {
b101011 ."
b10010010010010101001001001001010 w
b10010010010010101001001001001010 z
b11101001 m
b11101001 v
0U
0[
b111110100101 Z
b111110100101 a
b101 Y
b101 b
b0 X
b0 c
b10011 S
b10011 `
1>
1?
0B
b11010 "
b11010 8
b1011 ;
b10001 :
b1110 &"
b1110 +"
0!"
1~
b11 x
b11 y
b0 p
b0 s
b100010 q
b100010 t
0o
1n
b1001100000001010011111010010100 \
b1001100000001010011111010010100 ^
b11100 E
b11100 I
b11111 C
b11111 G
b10001 (
b10001 2
b1011 )
b1011 3
b100111100 ,
b100111100 6
#40
b1010010010010100100100100101010 w
b1010010010010100100100100101010 z
b0 m
b0 v
1[
b100100011 V
b100100011 e
b10010 S
b10010 `
1B
0>
1?
1!
b0 "
b0 8
b100 ;
b11 :
b100 x
b100 y
b1101 p
b1101 s
b101000 q
b101000 t
b1001000000000000000010010001110 \
b1001000000000000000010010001110 ^
b10011 C
b10011 G
b11 (
b11 2
b100 )
b100 3
0#
b10011 '
b10011 1
#50
b1111101000 9
b1111101000 =
b10101001010100100100100100101010 w
b10101001010100100100100100101010 z
b1111111111 m
b1111111111 v
b0 M
b0 j
b101 W
b101 d
b100 O
b100 h
b10 Q
b10 f
b111010 S
b111010 `
1B
0?
b100000010 "
b100000010 8
0!
b1000 ;
b101 x
b101 y
b1 p
b1 s
b100000 q
b100000 t
b11101000010001000000000000010100 \
b11101000010001000000000000010100 ^
b10010 C
b10010 G
b1000 )
b1000 3
b100100 '
b100100 1
b1111101000 *
b1111101000 4
#60
b1 <
b11111010 9
b11111010 =
1>
1?
0B
b100 ;
b11010 C
b11010 G
b11111010 *
b11111010 4
b100 )
b100 3
b111010 '
b111010 1
b1 &
b1 0
#100
x0"
0~"
bx ="
bx S"
bx b"
bx f"
bx s"
bx z"
bx B"
bx _"
bx d"
b10100100101001001010010 L"
b10100100101001001010010 ^"
b10100100101001001010010 e"
1/"
#200
0/"
#300
b10100100101001001010011 L"
b10100100101001001010011 ^"
b10100100101001001010011 e"
1/"
#400
0/"
#500
b10100100101001001010100 L"
b10100100101001001010100 ^"
b10100100101001001010100 e"
1/"
