ALU 32 Bit MIPS

<filler> 
The ALU we use has all standard features, listing them would be pointless, so we'll skip straight to demo. Please note that all of these values don't correspond to actual instructions, we're just giving inputs to test the output.

(Scroll to line 196)

First off we'll test a few R type instructions. (Point at opcode being six zeros.) We feed in the values from rs and rt, and supply the corresponding funct for add.
Next we subtract some values. For the shift amount instructions, please note we use a temp variable i to keep track of the number of iterations. (line 15). 
Now, when we say add 5 to 1500 from imm field, just feed in the appropriate register value instead of passing the register number and using the memory module.
Now we do or with an immediate value. Last, we test out the value of signal being generated for branch on equal.
We aren't using a zero flag, just for ease of implementation. 

Now, let's look at the gtk wave diagram.

So for the first instruction you can see the expected value of 2, and the next one gives value -2. 
Thirteen hex is D, 4 * D is is 52, or 0x34. 
Moving on, 1515 in hex is 0x5EB, or Immediate of 7 and 1024 is 0x407, as you see here. Now for the valid beq, you can see the branch signal being generated, and for the invalid it goes back down. 

That's it for this demo. 

=======================

ALU 64 bits for uPower

<filler> 
The ALU we use has all standard features, listing them would be pointless, so we'll skip straight to demo. Please note that all of these values don't correspond to actual instructions, we're just giving inputs to test the output.

Because of the absolute size of the instruction set, we'll only be testing a few of them here. We have the XO format, to add 3 and 5, gives you 8. Subtract 31 from 14, you can see the values in hex properly for rs and rt, giving -17, the logical and of 12 and 13, xor of 11 and 17 is 26, or 0x1A in hex, the Branch on not equal gives a signal as expected, and goes down the next turn.

The store word generates the value based on sign extended si, and the doubleword data is zero extended, showing both si and ds field inputs work as expected.