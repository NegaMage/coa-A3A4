For the MIPS part:

The registers are all stored physically on the registers.mem file in this folder. (shows location on vscode/folder.) Now, we designed the module to work on these inputs, (shows input section in code) but we couldn't get the clock to synch properly, so in effect the clock isn't used at all. Here we have the read_data_1 and read_data_2, the parts that give output data, and the input write_data, which will store the value to be entered into registers.
The rest all, opcode, rs rt rd parts, the three flags or signals, follow the same textbook notation.

In the beginning we load the values from the registers onto the variable registers. This isn't done in actual processors, the values are initialised to zeroes, but we did this so we could all start with some data in the registers. Notice how we set the 0th register to zero straight off. Later, for every write back into the registers.mem file we maintain this zero value here,(shows line 60). 

So let's go to the test bench. (line 79)

First we set the signals to read from the registers r0 and r11. 

We see the values on the terminal here...(first line.)

Then we try and store the write data into rd, because the regread flag is set to 1. So we are loading the least byte, and take note of that, bcz of that large number (5550123) only the least byte will go through.

Now we try storing a halfword into r0. Ideally this should not be stored, and when we read from it again the value should be zero.
Let's check these ideas.

(Open GTKWave)

You can see the flags being set and reset here (shows the 3 flags), and look at the regread later where we tried to read from r14, and r0, we see that the read_data_1 is zero, as we expected from writing into r0, and r14 has the least byte, which in hex is just two chars.

Thank you.