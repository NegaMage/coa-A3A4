ins_parser

Ok so as we know the job of ins_parser is to identify the type of instrction and then split the given instruction into its respective segments

//MIPS
Now for MIPS...
(Show ref image 1)
These are the instruction types in MIPS

(scroll to line 26)
So the first 6 bits are set to the Opcode and...
Now based on the Opcode we split the identify the type of instruction to be either of R, I or J type
  (Highlight as u speak)

Now for R-type instruction we split the instruction into its respective rs, rt, rd, shamt, funct parts
  (Highlight as u speak)

(Explain similary for I type with rs,rt and immediate)

For J type instruction....
The rest of the instruction is the addres that we will Jump...
So bits 25 to 0 are set to address
  (Highlight as u speak)


//Upower
while for Upower...
(Show ref image 2)
We have these instruction types
As we can see few instruction types have an extended opcode for identifiying the type of the function

(Scroll to line 39)
Now for XO type - we comapre the opcode and the extended Opcode to idenntify its type
and assign rs, rt, rd .... respectively
  (Highlight as u speak)

(similary show for all instrction types...)
